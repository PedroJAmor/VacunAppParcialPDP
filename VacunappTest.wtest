import Vacunapp.*

object calendarioStub {
  var property _day = 1
  var property _month = 1
  var property _year = 2024
  method hoy() = new Date(day = _day, month = _month, year = _year)
}

describe "Tests de Paifer" {

  method crearPersona() = new Persona(anticuerpos=1000,
  edad=22,
  inmunidad = calendarioStub.hoy(),
  calendario = calendarioStub,
  nombre = "")

  test "Test de Paifer mayor de 40" {
    const persona = self.crearPersona()
    persona.edad(41)
    const fechaInmunidad = new Date(day = 1, month = 7, year = 2024)
    paifer.aplicar(persona)

    assert.equals(10000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de Paifer menor o igual de 40" {
    const persona = self.crearPersona()
    persona.edad(40)
    const fechaInmunidad = new Date(day = 1, month = 10, year = 2024)
    paifer.aplicar(persona)

    assert.equals(10000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de larussa menor a 20" {
    const persona = self.crearPersona()
    const larussa15 = new Larussa(multiplicador = 15)
    const fechaInmunidad = new Date(day = 3, month = 3, year = 2024)

    larussa15.aplicar(persona)

    assert.equals(15000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de larussa mayor a 20" {
    const persona = self.crearPersona()
    const larussa25 = new Larussa(multiplicador = 25)
    const fechaInmunidad = new Date(day = 3, month = 3, year = 2024)

    larussa25.aplicar(persona)

    assert.equals(20000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de AstraLaVistaZeneca nombre par"{
    const persona = self.crearPersona()
    persona.nombre("ParP")
    const fechaInmunidad = new Date(day=1, month = 7, year = 2024)

    astraLaVistaZeneca.aplicar(persona)
    
    assert.equals(11000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de AstraLaVistaZeneca nombre impar"{
    const persona = self.crearPersona()
    persona.nombre("Impar")
    const fechaInmunidad = new Date(day=1, month = 8, year = 2024)

    astraLaVistaZeneca.aplicar(persona)
    
    assert.equals(11000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

  test "Test de Combineta 1" {
    const persona = self.crearPersona()
    persona.edad(41)
    persona.nombre("impar")
    const fechaInmunidad = new Date(day = 1, year = 2024, month = 8)
    const combineta = new Combineta(vacunas = [paifer, astraLaVistaZeneca])

    combineta.aplicar(persona)
    
    assert.equals(10000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }

    test "Test de Combineta 2" {
    const persona = self.crearPersona()
    persona.edad(40)
    persona.nombre("impar")
    const fechaInmunidad = new Date(day = 1, year = 2024, month = 10)
    const combineta = new Combineta(vacunas = [paifer, astraLaVistaZeneca, new Larussa(multiplicador = 1)])

    combineta.aplicar(persona)
    
    assert.equals(1000, persona.anticuerpos())
    assert.equals(fechaInmunidad, persona.inmunidad())
  }
}

// punto 2 

describe "Tests de Costos" {
  method crearPersona() = new Persona(anticuerpos=1000,
    edad=22,
    inmunidad = calendarioStub.hoy(),
    calendario = calendarioStub,
    nombre = "")

  test "Test de Paifer para menor" {
    const persona = self.crearPersona()
    persona.edad(17)

    assert.equals(1400, paifer.costo(persona))
  }

  test "Test de Paifer para mayor, menor de 30" {
    const persona = self.crearPersona()
    persona.edad(18)

    assert.equals(1100, paifer.costo(persona))
  }

  test "Test de Paifer para mayor, 30" {
    const persona = self.crearPersona()
    persona.edad(30)

    assert.equals(1100, paifer.costo(persona))
  }

  test "Test de Paifer para mayor, mayor de 30" {
    const persona = self.crearPersona()
    persona.edad(35)

    assert.equals(1350, paifer.costo(persona))
  }

  test "Test de Larussa 10" {
    const persona = self.crearPersona()
    const larussa10 = new Larussa(multiplicador = 10)

    assert.equals(2000, larussa10.costo(persona))
  }

  test "Test de Larussa +20" {
    const persona = self.crearPersona()
    persona.edad(40)
    const larussa30 = new Larussa(multiplicador = 30)

    assert.equals(3500, larussa30.costo(persona))
  }

  test "Test de AstraLaVistaZeneca persona especial" {
    const persona = self.crearPersona()
    persona.provincia("Tierra del Fuego")

    assert.equals(3000, astraLaVistaZeneca.costo(persona))
  }
  
  test "Test de AstraLaVistaZeneca persona no especial" {
    const persona = self.crearPersona()
    
    assert.equals(1000, astraLaVistaZeneca.costo(persona))
  }

  test "Test de Combineta" {
    const persona = self.crearPersona()
    persona.provincia("Neuqu√©n")
    persona.edad(40)
    const larussa30 = new Larussa(multiplicador = 30)

    const combineta = new Combineta(vacunas = [larussa30, paifer, astraLaVistaZeneca])

    assert.equals(8900, combineta.costo(persona))
  }
}

//Punto 3

describe "Test de elecciones de vacuna" {
  method crearPersona() = new Persona(anticuerpos=1000,
    edad=22,
    inmunidad = calendarioStub.hoy(),
    calendario = calendarioStub,
    nombre = "")

  test "Test de cualquierosa paiser" {
    const persona = self.crearPersona()
    persona.preferenciaVacuna(cualquierosa)

    assert.that(persona.elige(paifer))
  }

  test "Test de cualquierosa astraLaVistaZeneca" {
    const persona = self.crearPersona()
    persona.preferenciaVacuna(cualquierosa)

    assert.that(persona.elige(astraLaVistaZeneca))
  }

  test "Test de anticuerposa, elige astraLaVistaZeneca" {
    const persona = self.crearPersona()
    persona.anticuerpos(95000)
    persona.preferenciaVacuna(anticuerposa)

    assert.that(persona.elige(astraLaVistaZeneca))
  }

  test "Test de anticuerposa, elige paifer" {
    const persona = self.crearPersona()
    persona.anticuerpos(15000)
    persona.preferenciaVacuna(anticuerposa)

    assert.that(persona.elige(paifer))
  }

  test "Test de anticuerposa, elige larussa 15" {
    const persona = self.crearPersona()
    persona.anticuerpos(10000)
    persona.preferenciaVacuna(anticuerposa)

    assert.that(persona.elige(new Larussa(multiplicador = 15)))
  }

  test "Test de inmunidosasFijas, no elige larussa 5/3" {
    const persona = self.crearPersona()
    persona.preferenciaVacuna(inmunidosaFija)

    assert.notThat(persona.elige(new Larussa(multiplicador = 15))) 
  }

  test "Test de inmunidosasFijas, elige paifer" {
    const persona = self.crearPersona()
    persona.preferenciaVacuna(inmunidosaFija)

    assert.that(persona.elige(paifer)) 
  }

  test "Test de inmunidosasFijas, astraLaVistaZeneca" {
    const persona = self.crearPersona()
    persona.preferenciaVacuna(inmunidosaFija)

    assert.that(persona.elige(astraLaVistaZeneca)) 
  }

  test "Test de inmunidosasVariable elige paiser" {
    const persona = self.crearPersona()
    persona.edad(40)
    const inmunidosa = new InmunidosaVariable(meses = 6)
    persona.preferenciaVacuna(inmunidosa)

    assert.that(persona.elige(paifer)) 
  }

  test "Test de inmunidosasVariable no elige paiser" {
    const persona = self.crearPersona()
    persona.edad(41)
    const inmunidosa = new InmunidosaVariable(meses = 6)
    persona.preferenciaVacuna(inmunidosa)

    assert.notThat(persona.elige(paifer)) 
  }
}